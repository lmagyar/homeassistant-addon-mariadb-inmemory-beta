#!/command/with-contenv bashio
# ==============================================================================
# Post-start initialization of  MariaDB service
# ==============================================================================
MARIADB_DATA=$(</etc/MARIADB_DATA)
MARIADB_DUMP=$(</etc/MARIADB_DUMP)
MARIADB_DUMP_FINISHED=$(</etc/MARIADB_DUMP_FINISHED)
EXPORT_IMPORT_DATABASE_CONTENT=$(</etc/EXPORT_IMPORT_DATABASE_CONTENT)

function execute_without_error_messages() {
    local current_log_level="${__BASHIO_LOG_LEVELS[${__BASHIO_LOG_LEVEL}]}"
    bashio::log.level fatal
    local exit_code=0
    $@ || exit_code=$?
    bashio::log.level ${current_log_level}
    return ${exit_code}
}

# Delete service information from the Supervisor
bashio::log.info "Deleting service information from Home Assistant."
execute_without_error_messages bashio::services.delete "mysql"

bashio::log.info "Check data integrity and fix corruptions"
mysqlcheck --no-defaults --databases mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --databases mysql --check --check-upgrade --auto-repair || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --check --check-upgrade --auto-repair || true

bashio::log.info "Ensuring internal database upgrades are performed"
mysql_upgrade --silent

# Set default secure values after initial setup
bashio::log.info "Secure the installation"
mysql <<-EOSQL
    SET @@SESSION.SQL_LOG_BIN=0;
    DELETE FROM
        mysql.user
    WHERE
        user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
            OR host NOT IN ('localhost');
    DELETE FROM
        mysql.proxies_priv
    WHERE
        user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
            OR host NOT IN ('localhost');
    DROP DATABASE IF EXISTS test;
    FLUSH PRIVILEGES;
EOSQL

# Init databases
bashio::log.info "Ensure databases exists"
for database in $(bashio::config "databases"); do
    bashio::log.info "Create database ${database}"
    mysql -e "CREATE DATABASE ${database};" 2> /dev/null || true
done

# Cleanup outdated file naming if restored from older backup
if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/recorder}.tmp"; then
    mv "${MARIADB_DUMP/TYPE/recorder}.tmp" "${MARIADB_DUMP/TYPE/data1}.tmp"
fi
if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/recorder}"; then
    mv "${MARIADB_DUMP/TYPE/recorder}" "${MARIADB_DUMP/TYPE/data1}"
fi
if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/data}.tmp"; then
    mv "${MARIADB_DUMP/TYPE/data}.tmp" "${MARIADB_DUMP/TYPE/data2}.tmp"
fi
if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/data}"; then
    mv "${MARIADB_DUMP/TYPE/data}" "${MARIADB_DUMP/TYPE/data2}"
fi

# Cleanup failed export
if bashio::fs.file_exists "${MARIADB_DUMP_FINISHED}"; then
    if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/schema}.tmp"; then
        rm -f ${MARIADB_DUMP/TYPE/schema}
        mv ${MARIADB_DUMP/TYPE/schema}.tmp ${MARIADB_DUMP/TYPE/schema}
    fi
    if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/data1}.tmp"; then
        rm -f ${MARIADB_DUMP/TYPE/data1}
        mv ${MARIADB_DUMP/TYPE/data1}.tmp ${MARIADB_DUMP/TYPE/data1}
    fi
    if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/data2}.tmp"; then
        rm -f ${MARIADB_DUMP/TYPE/data2}
        mv ${MARIADB_DUMP/TYPE/data2}.tmp ${MARIADB_DUMP/TYPE/data2}
    fi
    rm ${MARIADB_DUMP_FINISHED}
else
    rm -f ${MARIADB_DUMP/TYPE/schema}.tmp
    rm -f ${MARIADB_DUMP/TYPE/data1}.tmp
    rm -f ${MARIADB_DUMP/TYPE/data2}.tmp
fi

# Import database structure and content... (no connection is allowed until it is finished)
if bashio::config.exists "retention.enabled" && bashio::fs.directory_exists "${MARIADB_DATA}/homeassistant"; then
    if bashio::config.true "retention.enabled"; then
        EXPORT_IMPORT_DATABASE_CONTENT=true
        if ! bashio::fs.file_exists "${MARIADB_DUMP/TYPE/schema}"; then
            bashio::log.warning "Importing last known database content skipped, no dump file found"
        else
            bashio::log.info "Last known database content time stamp is $(stat ${MARIADB_DUMP/TYPE/schema} -c %y)"
            bashio::log.info "Importing database structure and content... (no connection is allowed until it is finished)"
            gzip -d ${MARIADB_DUMP/TYPE/schema} -c \
                | mysql homeassistant
            gzip -d ${MARIADB_DUMP/TYPE/data1} -c \
                | mysql homeassistant
            gzip -d ${MARIADB_DUMP/TYPE/data2} -c \
                | mysql homeassistant
        fi
    else
        if bashio::fs.file_exists "${MARIADB_DUMP/TYPE/schema}"; then
            rm -f ${MARIADB_DUMP/TYPE/schema}
            rm -f ${MARIADB_DUMP/TYPE/data1}
            rm -f ${MARIADB_DUMP/TYPE/data2}
            bashio::log.info "Data retention is explicitly turned off, unused exported database content is removed"
        fi
    fi
fi

# Create default schema after initial setup to force using Aria instead of InnoDB
if (( 0 == $(mysql -Nse "SELECT count(1) FROM information_schema.tables WHERE table_schema = 'homeassistant' AND table_name = 'schema_changes';") )); then
    bashio::log.info "Create default schema in database homeassistant"
    declare schema_version=$(ls /usr/share/schema.v??.sql | sed -n 's/^\/usr\/share\/schema\.v\(\d\d\)\.sql$/\1/p')
    mysql homeassistant < "/usr/share/schema.v${schema_version}.sql"
    mysql homeassistant -Nse "INSERT IGNORE INTO schema_changes (change_id, schema_version, changed) VALUES (1, ${schema_version}, UTC_TIMESTAMP());"
fi

# Init logins
bashio::log.info "Ensure users exists and are updated"
for login in $(bashio::config "logins|keys"); do
    USERNAME=$(bashio::config "logins[${login}].username")
    PASSWORD=$(bashio::config "logins[${login}].password")

    if mysql -e "SET PASSWORD FOR '${USERNAME}'@'%' = PASSWORD('${PASSWORD}');" 2> /dev/null; then
        bashio::log.info "Update user ${USERNAME}"
    else
        bashio::log.info "Create user ${USERNAME}"
        mysql -e "CREATE USER '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}';" 2> /dev/null || true
    fi
done

# Init rights
bashio::log.info "Init/Update rights"
for right in $(bashio::config "rights|keys"); do
    USERNAME=$(bashio::config "rights[${right}].username")
    DATABASE=$(bashio::config "rights[${right}].database")

    if bashio::config.exists "rights[${right}].privileges"; then
        PRIVILEGES=$(bashio::config "rights[${right}].privileges")
        bashio::log.info "Granting ${PRIVILEGES} to ${USERNAME} on ${DATABASE}"
        mysql -e "REVOKE ALL PRIVILEGES ON ${DATABASE}.* FROM '${USERNAME}'@'%';" || true
        mysql -e "GRANT ${PRIVILEGES} ON ${DATABASE}.* TO '${USERNAME}'@'%';" || true
    else
        bashio::log.info "Granting all privileges to ${USERNAME} on ${DATABASE}"
        mysql -e "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'%';" 2> /dev/null || true
    fi
done

# Generate service user
if ! bashio::fs.file_exists "/data/secret"; then
    pwgen 64 1 > /data/secret
fi
SECRET=$(</data/secret)
mysql -e "CREATE USER 'service'@'172.30.32.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "CREATE USER 'service'@'172.30.33.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.32.%' WITH GRANT OPTION;" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.33.%' WITH GRANT OPTION;" 2> /dev/null || true

# Flush privileges
mysql -e "FLUSH PRIVILEGES;" 2> /dev/null || true

# Send service information to the Supervisor
PAYLOAD=$(\
    bashio::var.json \
        host "$(hostname)" \
        port "^3306" \
        username "service" \
        password "${SECRET}"
)
bashio::log.info "Sending service information to Home Assistant."
bashio::services.publish "mysql" "${PAYLOAD}"

# Save variables
echo ${EXPORT_IMPORT_DATABASE_CONTENT} > /etc/EXPORT_IMPORT_DATABASE_CONTENT
